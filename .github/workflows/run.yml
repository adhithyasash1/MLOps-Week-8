name: "Train & Evaluate Data Poisoning Impact"
on: [push]

jobs:
  run-experiments:
    name: Run Poisoning Experiments
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache Pip Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Set up DVC & CML
        uses: iterative/setup-dvc@v1
      - uses: iterative/setup-cml@v1

      - name: Configure Git
        run: |
          git config --global user.name "adhithyasash1"
          git config --global user.email "sashiradhithya@gmail.com"

      - name: Pull DVC Data
        run: dvc pull

      - name: Run All DVC Experiments with a Loop
        run: |
          for rate in 0.0 0.05 0.10 0.25 0.50
          do
            echo "--- Running experiment for poison rate: $rate ---"
            dvc exp run --set-param train.poison_rate=$rate
          done

      - name: Export Experiment Results to CSV
        run: dvc exp show --csv > results.csv

      - name: Debug CSV Content
        run: |
          echo "--- Content of results.csv ---"
          cat results.csv
          echo "------------------------------"

      - name: Generate Summary Plot
        run: python plot_summary.py

      - name: Create Formatted Metrics Table
        run: |
          echo "Creating formatted metrics table..."
          python -c "
          import pandas as pd
          import sys
          
          try:
              df = pd.read_csv('results.csv')
              
              # Handle duplicate columns
              cols = pd.Series(df.columns)
              for dup in cols[cols.duplicated()].unique():
                  cols[cols[cols == dup].index.values.tolist()] = [dup + '_' + str(i) if i != 0 else dup for i in range(sum(cols == dup))]
              df.columns = cols
              
              # Filter for actual experiments (with names)
              df_filtered = df[df['Experiment'].notna() & (df['Experiment'] != '')]
              
              # Convert to numeric
              df_filtered['poison_rate'] = pd.to_numeric(df_filtered['poison_rate'], errors='coerce')
              df_filtered['best_model_accuracy'] = pd.to_numeric(df_filtered['best_model_accuracy'], errors='coerce')
              df_filtered['best_model_loss'] = pd.to_numeric(df_filtered['best_model_loss'], errors='coerce')
              df_filtered['best_model_f1'] = pd.to_numeric(df_filtered['best_model_f1'], errors='coerce')
              
              # Sort by poison rate
              df_filtered = df_filtered.sort_values('poison_rate')
              
              # Create formatted table
              with open('metrics_table.md', 'w') as f:
                  f.write('| Poison Rate | Accuracy | Loss | F1 Score | Experiment |\n')
                  f.write('|------------|----------|------|----------|------------|\n')
                  for _, row in df_filtered.iterrows():
                      f.write(f'| {row[\"poison_rate\"]:.0%} | {row[\"best_model_accuracy\"]:.4f} | {row[\"best_model_loss\"]:.4f} | {row[\"best_model_f1\"]:.4f} | {row[\"Experiment\"]} |\n')
              
              print('Formatted metrics table created successfully')
          except Exception as e:
              print(f'Error creating metrics table: {e}')
              sys.exit(1)
          "

      - name: Create CML Report
        env:
          repo_token: ${{ secrets.TOKEN }}
        run: |
          ACCURACY_FMT=$(cat baseline_acc.txt)
          echo "## 🧪 Data Poisoning Analysis Results" > report.md
          echo "" >> report.md
          echo "![Baseline Accuracy](https://img.shields.io/badge/Baseline%20Accuracy-${ACCURACY_FMT}-blue)" >> report.md
          echo "" >> report.md
          echo "### 📊 Performance vs. Poison Rate" >> report.md
          echo "" >> report.md
          cml publish summary_plot.png --md >> report.md
          echo "" >> report.md
          echo "### 📈 Detailed Experiment Metrics" >> report.md
          echo "" >> report.md
          cat metrics_table.md >> report.md
          echo "" >> report.md
          echo "### 🔍 Key Findings" >> report.md
          echo "- **Baseline Performance**: Model achieves ${ACCURACY_FMT} accuracy with clean data" >> report.md
          echo "- **Impact of Poisoning**: Performance degrades as poison rate increases" >> report.md
          echo "- **Robustness Assessment**: Evaluate model resilience to data corruption" >> report.md
          echo "" >> report.md
          echo "---" >> report.md
          echo "**🚀 Workflow triggered by:** ${{ github.actor }} | **📅 Run Date:** $(date +'%Y-%m-%d %H:%M:%S UTC')" >> report.md
          cml comment create report.md

      - name: Upload Results as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: experiment-results
          path: |
            summary_plot.png
            results.csv
            metrics_table.md
